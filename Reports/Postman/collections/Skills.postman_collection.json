{
	"info": {
		"_postman_id": "602d05ae-7823-4e46-a19b-f1a89095f977",
		"name": "Skills",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28621618",
		"_collection_link": "https://universal-star-838878.postman.co/workspace/Group5FinalProject~d555d5c3-cfb6-4eb9-a7be-f11016610e46/collection/30147531-602d05ae-7823-4e46-a19b-f1a89095f977?action=share&source=collection_link&creator=28621618"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const professionId = Math.floor(Math.random() * (157 - 101 + 1) + 101);\r",
							"\r",
							"const password = pm.variables.replaceIn('{{$randomPassword}}');\r",
							"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
							"const username = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"\r",
							"pm.collectionVariables.set(\"password\", password);\r",
							"pm.collectionVariables.set(\"email\", email);\r",
							"pm.collectionVariables.set(\"username\", username);\r",
							"pm.collectionVariables.set(\"professionId\", professionId);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const repsonse = pm.response.text();\r",
							"const responseArray = repsonse.split(\" \");\r",
							"const userId=responseArray[6];\r",
							"pm.collectionVariables.set(\"userId\",userId)\r",
							"\r",
							"\r",
							"pm.test(\"User name is as expected\", function(){\r",
							"    const expectedUserName = pm.collectionVariables.get(\"username\");\r",
							"\r",
							"    const actualUserName= responseArray[3];\r",
							"\r",
							"    pm.expect(actualUserName).to.equals(expectedUserName);\r",
							"});\r",
							"\r",
							"pm.test(\"User id is not null\", function(){\r",
							"    const expectedUserId = pm.collectionVariables.get(\"adminUserId\");\r",
							"\r",
							"    const actualUserId= responseArray[6];\r",
							"    pm.expect(actualUserId).is.not.null;\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"User id is as expected\", function(){\r",
							"    const expectedUserId = pm.collectionVariables.get(\"userId\");\r",
							"\r",
							"    const actualUserId= responseArray[6];\r",
							"\r",
							"    pm.expect(actualUserId).to.equals(expectedUserId)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": \"{{professionId}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{username}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseApiUrl}}/users/",
					"host": [
						"{{baseApiUrl}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate request",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update all User data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"const lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"\r",
							"const randomYear = Math.floor(Math.random() * (2000 - 1920 + 1)) + 1920;\r",
							"const randomMonth = String(Math.floor(Math.random() * 12) + 1).padStart(2, '0');\r",
							"const randomDay = String(Math.floor(Math.random() * 31) + 1).padStart(2, '0');\r",
							"const birthYear = `${randomYear}-${randomMonth}-${randomDay}`;\r",
							"\r",
							"const cityId = Math.floor(Math.random() * 39) + 1;\r",
							"const picturePrivacy = Math.random() < 0.5;\r",
							"const sex = Math.random() < 0.5 ? \"MALE\" : \"FEMALE\";\r",
							"\r",
							"pm.collectionVariables.set(\"firstName\", firstName);\r",
							"pm.collectionVariables.set(\"lastName\", lastName)\r",
							"pm.collectionVariables.set(\"birthYear\", birthYear);\r",
							"pm.collectionVariables.set(\"picturePrivacy\", picturePrivacy);\r",
							"pm.collectionVariables.set(\"sex\", sex);\r",
							"pm.collectionVariables.set(\"cityId\", cityId)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData=pm.response.json()\r",
							"\r",
							"pm.test(\"The username's first name is the expected one\", function(){\r",
							"    const expectedFirstName = pm.collectionVariables.get(\"firstName\");\r",
							"\r",
							"\r",
							"    const actualFirstName=responseData.firstName;\r",
							"    pm.expect(actualFirstName).to.equals(expectedFirstName);\r",
							"});\r",
							"pm.test(\"The username's last name is the expected one\", function(){\r",
							"    const expectedLastName = pm.collectionVariables.get(\"lastName\");\r",
							"\r",
							"\r",
							"    const actualLastName=responseData.lastName;\r",
							"    pm.expect(actualLastName).to.equals(expectedLastName);\r",
							"});\r",
							"pm.test(\"City id is expected\", function(){\r",
							"    const expectedCityId = pm.collectionVariables.get(\"cityId\");\r",
							"\r",
							"\r",
							"    const actualCityId=responseData.location.city.id;\r",
							"    pm.expect(actualCityId).to.equals(expectedCityId);\r",
							"});\r",
							"pm.test(\"The user's gender is the expected one\", function(){\r",
							"    const expectedGender = pm.collectionVariables.get(\"sex\");\r",
							"\r",
							"\r",
							"    const actualGender=responseData.sex;\r",
							"    pm.expect(actualGender).to.equals(expectedGender);\r",
							"});\r",
							"pm.test(\"The user's date of birth is the expected one\", function(){\r",
							"    const expectedBirthDate = pm.collectionVariables.get(\"birthYear\");\r",
							"\r",
							"\r",
							"    const actualBirthDate=responseData.birthYear;\r",
							"    pm.expect(actualBirthDate).to.equals(expectedBirthDate);\r",
							"});\r",
							"pm.test(\"Member since date set to current date when new user created\", function(){\r",
							"    const pmDateTimeUtility = require('moment');\r",
							"    const expectedDate = pmDateTimeUtility().format(\"DD/MM/YYYY\");\r",
							"\r",
							"\r",
							"    const actualDate = responseData.memberSince;\r",
							"    \r",
							"    pm.expect(actualDate).contains(expectedDate)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"birthYear\": \"{{birthYear}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"location\": {\r\n    \"city\": {\r\n      \"city\": \"\",\r\n      \"country\": {},\r\n      \"id\": {{cityId}}\r\n    },\r\n    \"id\": 1\r\n  },\r\n  \"picturePrivacy\": {{picturePrivacy}},\r\n  \"sex\": \"{{sex}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseApiUrl}}/users/auth/{{userId}}/personal",
					"host": [
						"{{baseApiUrl}}"
					],
					"path": [
						"users",
						"auth",
						"{{userId}}",
						"personal"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create skill",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const skill = pm.variables.replaceIn('{{$randomJobType}}');\r",
							"\r",
							"pm.collectionVariables.set(\"skill\", skill);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json()\r",
							"const skillId = responseData.skillId;\r",
							"pm.collectionVariables.set(\"skillId\", skillId);\r",
							"\r",
							"\r",
							"pm.test(\"User successfully added skill\", function () {\r",
							"    const expectedSkill = pm.collectionVariables.get(\"skill\");\r",
							"\r",
							"\r",
							"    const actualSkill = responseData.skill;\r",
							"    pm.expect(actualSkill).to.equals(expectedSkill);\r",
							"});\r",
							"\r",
							"pm.test(\"User's category id is expected\", function () {\r",
							"    const expectedCategoryId = pm.collectionVariables.get(\"professionId\");\r",
							"\r",
							"    const actualCategoryId = responseData.category.id;\r",
							"    pm.expect(actualCategoryId).to.equals(expectedCategoryId);\r",
							"});\r",
							"\r",
							"pm.test(\"Skill id is expected\", function () {\r",
							"    const expectedSkillId = pm.collectionVariables.get(\"skillId\");\r",
							"\r",
							"    const actualSkillId=responseData.skillId\r",
							"    pm.expect(actualSkillId).to.equals(expectedSkillId);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"category\": {\r\n    \"id\": {{professionId}},\r\n    \"name\": \"string\"\r\n  },\r\n  \"skill\": \"{{skill}}\",\r\n  \"skillId\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseApiUrl}}/skill/create",
					"host": [
						"{{baseApiUrl}}"
					],
					"path": [
						"skill",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Skills",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Response body contains skills\", function(){\r",
							"    pm.expect(response).to.be.not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseApiUrl}}/skill?sorted=true",
					"host": [
						"{{baseApiUrl}}"
					],
					"path": [
						"skill"
					],
					"query": [
						{
							"key": "sorted",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit skill",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const skill = pm.variables.replaceIn('{{$randomJobType}}');\r",
							"\r",
							"pm.collectionVariables.set(\"skill\", skill);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseApiUrl}}/skill/edit?skill={{skill}}&skillId={{skillId}}",
					"host": [
						"{{baseApiUrl}}"
					],
					"path": [
						"skill",
						"edit"
					],
					"query": [
						{
							"key": "skill",
							"value": "{{skill}}"
						},
						{
							"key": "skillId",
							"value": "{{skillId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one skills",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseApiUrl}}/skill/getOne?skillId={{skillId}}",
					"host": [
						"{{baseApiUrl}}"
					],
					"path": [
						"skill",
						"getOne"
					],
					"query": [
						{
							"key": "skillId",
							"value": "{{skillId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete skill",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const skill = pm.variables.replaceIn('{{$randomJobType}}');\r",
							"\r",
							"pm.collectionVariables.set(\"skill\", skill);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseApiUrl}}/skill/delete?skillId={{skillId}}",
					"host": [
						"{{baseApiUrl}}"
					],
					"path": [
						"skill",
						"delete"
					],
					"query": [
						{
							"key": "skillId",
							"value": "{{skillId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{randomPassword}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{randomUsername}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "professionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "skill",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "birthYear",
			"value": ""
		},
		{
			"key": "picturePrivacy",
			"value": ""
		},
		{
			"key": "sex",
			"value": ""
		},
		{
			"key": "cityId",
			"value": ""
		},
		{
			"key": "skillId",
			"value": "",
			"type": "string"
		},
		{
			"key": "sorted",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}